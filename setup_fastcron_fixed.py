#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import json
import time
from datetime import datetime, timedelta
import pytz

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è FastCron.com
FASTCRON_API_KEY = os.environ.get('FASTCRON_API_KEY')
FASTCRON_BASE_URL = 'https://app.fastcron.com/api'

# URL –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (—á–µ—Ä–µ–∑ GitHub Actions)
# –§–æ—Ä–º–∞—Ç: https://api.github.com/repos/{owner}/{repo}/dispatches
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    errors = []
    
    if not FASTCRON_API_KEY:
        errors.append("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è FASTCRON_API_KEY")
    
    if not WEBHOOK_URL:
        errors.append("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL")
    elif not WEBHOOK_URL.startswith('https://api.github.com/repos/'):
        errors.append("‚ùå WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å GitHub API URL: https://api.github.com/repos/{owner}/{repo}/dispatches")
    
    if not GITHUB_TOKEN:
        errors.append("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GITHUB_TOKEN")
    
    if errors:
        print("\n".join(errors))
        print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        print("1. FASTCRON_API_KEY - API –∫–ª—é—á —Å —Å–∞–π—Ç–∞ fastcron.com")
        print("2. WEBHOOK_URL - https://api.github.com/repos/{username}/{repo}/dispatches")
        print("3. GITHUB_TOKEN - Personal Access Token —Å –ø—Ä–∞–≤–∞–º–∏ 'repo' –∏ 'workflow'")
        return False
    
    return True

def test_fastcron_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FastCron API"""
    if not FASTCRON_API_KEY:
        return False
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç FastCron
        response = requests.get(
            f"{FASTCRON_BASE_URL}/v1/cron_list",
            params={'token': FASTCRON_API_KEY},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FastCron API —É—Å–ø–µ—à–Ω–æ")
                crons = data.get('data', [])
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(crons)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ FastCron API: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        elif response.status_code == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á FastCron")
            return False
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ FastCron: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FastCron: {e}")
        return False

def test_github_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub API"""
    if not WEBHOOK_URL or not GITHUB_TOKEN:
        return False
    
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
    }
    
    test_payload = {
        'event_type': 'test_fastcron_connection',
        'client_payload': {
            'test': True,
            'timestamp': datetime.now(pytz.UTC).isoformat()
        }
    }
    
    try:
        response = requests.post(WEBHOOK_URL, headers=headers, json=test_payload, timeout=10)
        
        if response.status_code == 204:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub API —É—Å–ø–µ—à–Ω–æ")
            return True
        elif response.status_code == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π GitHub —Ç–æ–∫–µ–Ω")
            return False
        elif response.status_code == 404:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return False
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ GitHub: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub: {e}")
        return False

def create_single_notification_job(notification_time: datetime, retry_count: int = 3):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ —Ç–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ FastCron
    """
    if not validate_environment():
        return False
    
    # FastCron –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π cron —Ñ–æ—Ä–º–∞—Ç
    minute = notification_time.minute
    hour = notification_time.hour
    day = notification_time.day
    month = notification_time.month
    
    # –°–æ–∑–¥–∞–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
    cron_expression = f"{minute} {hour} {day} {month} *"
    
    title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º POST –¥–∞–Ω–Ω—ã–µ –¥–ª—è GitHub webhook
    post_data = json.dumps({
        'event_type': 'floating_island_notification',
        'client_payload': {
            'notification_time': notification_time.isoformat(),
            'auto_scheduled': True
        }
    })
    
    # HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GitHub API
    http_headers = f"Authorization: token {GITHUB_TOKEN}\\r\\nAccept: application/vnd.github.v3+json\\r\\nContent-Type: application/json"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è FastCron API
    params = {
        'token': FASTCRON_API_KEY,
        'name': title,
        'expression': cron_expression,
        'url': WEBHOOK_URL,
        'httpMethod': 'POST',
        'postData': post_data,
        'httpHeaders': http_headers,
        'timezone': 'UTC',
        'notify': 'false'  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ—è—Ö
    }
    
    for attempt in range(retry_count):
        try:
            response = requests.get(
                f"{FASTCRON_BASE_URL}/v1/cron_add",
                params=params,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    job_data = result.get('data', {})
                    job_id = job_data.get('id')
                    print(f"‚úÖ FastCron –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (ID: {job_id})")
                    print(f"üïê –í—Ä–µ–º—è: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
                    print(f"‚öôÔ∏è Cron: {cron_expression}")
                    return job_id
                else:
                    error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    print(f"‚ùå –û—à–∏–±–∫–∞ FastCron: {error_msg}")
                    return False
            elif response.status_code == 429:
                # Rate limiting - FastCron –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                wait_time = (attempt + 1) * 5  # 5, 10, 15 —Å–µ–∫—É–Ω–¥
                print(f"‚è≥ Rate limit FastCron (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count}). –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
                time.sleep(wait_time)
                continue
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ FastCron (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < retry_count - 1:
                time.sleep(3)
                continue
            return False
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ FastCron –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫")
    return False

def create_fastcron_schedule():
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ FastCron –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
    """
    if not validate_environment():
        return False
    
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    if not test_fastcron_connection():
        return False
    
    if not test_github_connection():
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º POST –¥–∞–Ω–Ω—ã–µ –¥–ª—è GitHub webhook
    post_data = json.dumps({
        'event_type': 'floating_island_check',
        'client_payload': {
            'type': 'periodic_check'
        }
    })
    
    # HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GitHub API
    http_headers = f"Authorization: token {GITHUB_TOKEN}\\r\\nAccept: application/vnd.github.v3+json\\r\\nContent-Type: application/json"
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
    params = {
        'token': FASTCRON_API_KEY,
        'name': 'Floating Island Notifications Checker',
        'expression': '0,20,40 * * * *',  # –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
        'url': WEBHOOK_URL,
        'httpMethod': 'POST',
        'postData': post_data,
        'httpHeaders': http_headers,
        'timezone': 'UTC',
        'notify': 'false'
    }
    
    try:
        response = requests.get(
            f"{FASTCRON_BASE_URL}/v1/cron_add",
            params=params,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                job_data = result.get('data', {})
                job_id = job_data.get('id')
                print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ FastCron –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! Job ID: {job_id}")
                print(f"üîó URL: {WEBHOOK_URL}")
                print(f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç (:00, :20, :40)")
                print(f"üîë GitHub Token: {GITHUB_TOKEN[:10]}...{GITHUB_TOKEN[-4:]}")
                return True
            else:
                error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå –û—à–∏–±–∫–∞ FastCron: {error_msg}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ FastCron –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def list_existing_jobs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è FastCron"""
    if not FASTCRON_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è FASTCRON_API_KEY")
        return
    
    try:
        response = requests.get(
            f"{FASTCRON_BASE_URL}/v1/cron_list",
            params={'token': FASTCRON_API_KEY},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                crons = result.get('data', [])
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(crons)} –∑–∞–¥–∞–Ω–∏–π FastCron:")
                print("=" * 80)
                
                floating_jobs = []
                other_jobs = []
                
                for cron in crons:
                    if 'Floating Island' in cron.get('name', ''):
                        floating_jobs.append(cron)
                    else:
                        other_jobs.append(cron)
                
                if floating_jobs:
                    print(f"üèùÔ∏è Floating Island –∑–∞–¥–∞–Ω–∏—è ({len(floating_jobs)}):")
                    for job in floating_jobs:
                        job_id = job.get('id')
                        name = job.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        status = job.get('status', 0)
                        expression = job.get('expression', '')
                        
                        status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if status == 1 else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
                        print(f"  {status_text} ID: {job_id} - {name}")
                        print(f"    Cron: {expression}")
                
                if other_jobs:
                    print(f"\nüìå –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è ({len(other_jobs)}):")
                    for job in other_jobs:
                        job_id = job.get('id')
                        name = job.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        status = job.get('status', 0)
                        
                        status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if status == 1 else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
                        print(f"  {status_text} ID: {job_id} - {name}")
            else:
                error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå –û—à–∏–±–∫–∞ FastCron: {error_msg}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

def delete_job(job_id: str):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ FastCron –ø–æ ID"""
    if not FASTCRON_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è FASTCRON_API_KEY")
        return False
    
    try:
        response = requests.get(
            f"{FASTCRON_BASE_URL}/v1/cron_delete",
            params={
                'token': FASTCRON_API_KEY,
                'id': job_id
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                print(f"‚úÖ FastCron –∑–∞–¥–∞–Ω–∏–µ {job_id} —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå –û—à–∏–±–∫–∞ FastCron: {error_msg}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è FastCron"""
    import sys
    
    if len(sys.argv) < 2:
        print("üîß SETUP FASTCRON - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ FastCron.com")
        print("=" * 50)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python setup_fastcron_fixed.py list        - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è")
        print("  python setup_fastcron_fixed.py create      - —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
        print("  python setup_fastcron_fixed.py delete <ID> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID")
        print("  python setup_fastcron_fixed.py test        - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return
    
    command = sys.argv[1].lower()
    
    if command == 'list':
        list_existing_jobs()
    elif command == 'create':
        create_fastcron_schedule()
    elif command == 'delete' and len(sys.argv) > 2:
        job_id = sys.argv[2]
        delete_job(job_id)
    elif command == 'test':
        print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FASTCRON –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
        print("=" * 50)
        validate_environment()
        test_fastcron_connection()
        test_github_connection()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: list, create, delete <ID>, test")

if __name__ == "__main__":
    main()