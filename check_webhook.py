#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import json
from datetime import datetime
import pytz

def validate_webhook_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ webhook URL"""
    if not url:
        return False, "URL –Ω–µ –∑–∞–¥–∞–Ω"
    
    if not url.startswith('https://api.github.com/repos/'):
        return False, "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://api.github.com/repos/"
    
    if not '/dispatches' in url:
        return False, "URL –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ /dispatches"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL
    parts = url.replace('https://api.github.com/repos/', '').replace('/dispatches', '').split('/')
    if len(parts) != 2:
        return False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: https://api.github.com/repos/{owner}/{repo}/dispatches"
    
    owner, repo = parts
    if not owner or not repo:
        return False, "–ù–µ —É–∫–∞–∑–∞–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    
    return True, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –≤–ª–∞–¥–µ–ª–µ—Ü={owner}, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π={repo}"

def test_webhook_url(url, token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook URL"""
    if not url or not token:
        return False, "–ù–µ –∑–∞–¥–∞–Ω URL –∏–ª–∏ —Ç–æ–∫–µ–Ω"
    
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–π payload
    payload = {
        'event_type': 'test_webhook',
        'client_payload': {
            'test': True,
            'timestamp': datetime.now(pytz.UTC).isoformat()
        }
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        
        if response.status_code == 204:
            return True, "Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        elif response.status_code == 401:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω (401 Unauthorized)"
        elif response.status_code == 404:
            return False, "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω (404 Not Found) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL"
        elif response.status_code == 403:
            return False, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (403 Forbidden) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω"
        else:
            return False, f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
            
    except Exception as e:
        return False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"

def suggest_correct_url(current_url):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL"""
    if not current_url:
        return "https://api.github.com/repos/{owner}/{repo}/dispatches"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å owner –∏ repo –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ URL
    try:
        if 'github.com/' in current_url:
            parts = current_url.split('github.com/')
            if len(parts) > 1:
                path_parts = parts[1].split('/')
                if len(path_parts) >= 2:
                    owner, repo = path_parts[0], path_parts[1]
                    return f"https://api.github.com/repos/{owner}/{repo}/dispatches"
    except:
        pass
    
    return "https://api.github.com/repos/{owner}/{repo}/dispatches"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook"""
    print("üîç –ü–†–û–í–ï–†–ö–ê WEBHOOK URL")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    webhook_url = os.environ.get('WEBHOOK_URL')
    github_token = os.environ.get('GITHUB_TOKEN')
    
    print(f"–¢–µ–∫—É—â–∏–π WEBHOOK_URL: {webhook_url}")
    print(f"–¢–æ–∫–µ–Ω –∑–∞–¥–∞–Ω: {'‚úÖ' if github_token else '‚ùå'}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
    is_valid, message = validate_webhook_url(webhook_url)
    print(f"–§–æ—Ä–º–∞—Ç URL: {'‚úÖ' if is_valid else '‚ùå'} {message}")
    
    if not is_valid:
        correct_url = suggest_correct_url(webhook_url)
        print(f"\nüí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:")
        print(f"   {correct_url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    if is_valid and github_token:
        print(f"\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        success, message = test_webhook_url(webhook_url, github_token)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if success else '‚ùå'} {message}")
    
    print(f"\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
    print(f"1. WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:")
    print(f"   https://api.github.com/repos/{{owner}}/{{repo}}/dispatches")
    print(f"2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GITHUB_TOKEN –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ 'repo' –∏ 'workflow'")
    print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

if __name__ == "__main__":
    main()