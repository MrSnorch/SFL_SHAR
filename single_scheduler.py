#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∑–∞ —Ä–∞–∑
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å rate limiting
"""

import os
import sys
from datetime import datetime, timedelta
import pytz

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from floating_island_bot import calculate_next_events
    from setup_cronjob import create_single_notification_job, validate_environment
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã floating_island_bot.py –∏ setup_cronjob.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    sys.exit(1)

def schedule_single_event():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ"""
    if not validate_environment():
        return False
    
    now = datetime.now(pytz.UTC)
    events = calculate_next_events(now, count=1)
    
    if not events:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    event = events[0]
    notification_time = event['notification_time']
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º
    if notification_time <= now:
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ...")
        events = calculate_next_events(now + timedelta(minutes=1), count=1)
        if events:
            event = events[0]
            notification_time = event['notification_time']
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")
            return False
    
    event_start = event['event_start']
    
    print(f"üéØ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –û–î–ù–û–ì–û –°–û–ë–´–¢–ò–Ø")
    print("=" * 50)
    print(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
    print(f"üéà –°–æ–±—ã—Ç–∏–µ: {event_start.strftime('%d.%m.%Y %H:%M')} UTC")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–æ–±—ã—Ç–∏—è
    time_until = (notification_time - now).total_seconds()
    hours_until = int(time_until // 3600)
    print(f"‚è∞ –ß–µ—Ä–µ–∑: {hours_until} —á–∞—Å–æ–≤")
    
    title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
    
    print(f"\nüöÄ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ...")
    job_id = create_single_notification_job(notification_time, title)
    
    if job_id:
        print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!")
        print(f"üÜî Job ID: {job_id}")
        print(f"\nüí° –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"   python single_scheduler.py")
        return True
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
        return False

def show_next_event():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–±—ã—Ç–∏–∏"""
    now = datetime.now(pytz.UTC)
    events = calculate_next_events(now, count=1)
    
    if not events:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π")
        return
    
    event = events[0]
    notification_time = event['notification_time']
    event_start = event['event_start']
    
    kiev_tz = pytz.timezone('Europe/Kiev')
    event_kiev = event_start.astimezone(kiev_tz)
    
    print(f"üìÖ –°–õ–ï–î–£–Æ–©–ï–ï –°–û–ë–´–¢–ò–ï")
    print("=" * 30)
    print(f"üéà Floating Island: {event_kiev.strftime('%d.%m.%Y %H:%M')} (–ö–∏–µ–≤)")
    print(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
    
    time_until = (notification_time - now).total_seconds()
    if time_until > 0:
        hours = int(time_until // 3600)
        minutes = int((time_until % 3600) // 60)
        print(f"‚è∞ –î–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {hours}—á {minutes}–º–∏–Ω")
    else:
        print(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == 'info':
        show_next_event()
        return
    
    print(f"ü§ñ –û–î–ò–ù–û–ß–ù–´–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö FLOATING ISLAND")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')} UTC")
    print()
    
    if schedule_single_event():
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    else:
        print(f"\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.")

if __name__ == "__main__":
    main()