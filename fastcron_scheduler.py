#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import requests
import json
import time
from datetime import datetime, timedelta
import pytz

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è FastCron.com
FASTCRON_API_KEY = os.environ.get('FASTCRON_API_KEY')
FASTCRON_BASE_URL = 'https://www.fastcron.com/api'

# URL –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
GITHUB_TOKEN = os.environ.get('GH_TOKEN')

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not FASTCRON_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è FASTCRON_API_KEY")
        return False
    
    if not WEBHOOK_URL:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL")
        return False
    
    if not GITHUB_TOKEN:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GH_TOKEN")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def create_precise_notification_job(notification_time: datetime, title: str = None, retry_count: int = 3):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ FastCron –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    FastCron –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ rate limiting
    """
    if not validate_environment():
        return False
    
    # FastCron –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π cron —Ñ–æ—Ä–º–∞—Ç
    minute = notification_time.minute
    hour = notification_time.hour
    day = notification_time.day
    month = notification_time.month
    
    cron_expression = f"{minute} {hour} {day} {month} *"
    
    if not title:
        title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
    
    job_data = {
        'token': FASTCRON_API_KEY,
        'name': title,
        'cron': cron_expression,
        'url': WEBHOOK_URL,
        'method': 'POST',
        'headers': json.dumps([
            f"Authorization: token {GITHUB_TOKEN}",
            "Accept: application/vnd.github.v3+json",
            "Content-Type: application/json"
        ]),
        'data': json.dumps({
            'event_type': 'floating_island_notification',
            'client_payload': {
                'notification_time': notification_time.isoformat(),
                'precision': 'exact'
            }
        }),
        'timezone': 'UTC'
    }
    
    # FastCron –±–æ–ª–µ–µ —Ç–µ—Ä–ø–∏–º –∫ —á–∞—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
    for attempt in range(retry_count):
        try:
            response = requests.post(
                f"{FASTCRON_BASE_URL}/crontab",
                data=job_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'OK':
                    job_id = result.get('id')
                    print(f"‚úÖ FastCron –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! Job ID: {job_id}")
                    print(f"üïê –í—Ä–µ–º—è: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
                    print(f"‚öôÔ∏è Cron: {cron_expression}")
                    return job_id
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ FastCron: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return False
            elif response.status_code == 429:
                # FastCron rate limiting - –±–æ–ª–µ–µ –º—è–≥–∫–æ–µ
                wait_time = (attempt + 1) * 3  # 3, 6, 9 —Å–µ–∫—É–Ω–¥ (–Ω–∞–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ —á–µ–º —É cron-job.org)
                print(f"‚è≥ FastCron rate limit (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count}). –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
                time.sleep(wait_time)
                continue
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
                return False
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count})")
            if attempt < retry_count - 1:
                time.sleep(2)
                continue
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < retry_count - 1:
                time.sleep(2)
                continue
            return False
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å FastCron –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫")
    return False

def cleanup_old_jobs():
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è Floating Island –∏–∑ FastCron
    """
    if not validate_environment():
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
        response = requests.get(
            f"{FASTCRON_BASE_URL}/crontab",
            params={'token': FASTCRON_API_KEY},
            timeout=30
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ FastCron –∑–∞–¥–∞–Ω–∏–π: {response.status_code}")
            return False
        
        result = response.json()
        if result.get('status') != 'OK':
            print(f"‚ùå FastCron API –æ—à–∏–±–∫–∞: {result.get('message')}")
            return False
        
        crons = result.get('crons', [])
        deleted_count = 0
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(crons)} –∑–∞–¥–∞–Ω–∏–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...")
        
        for cron in crons:
            name = cron.get('name', '')
            job_id = cron.get('id')
            
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è Floating Island
            if 'Floating Island' in name and job_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º (Checker)
                if 'Checker' in name or 'Notifications Checker' in name:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {name}")
                    continue
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–æ–Ω–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ)
                try:
                    delete_response = requests.delete(
                        f"{FASTCRON_BASE_URL}/crontab/{job_id}",
                        params={'token': FASTCRON_API_KEY},
                        timeout=30
                    )
                    
                    if delete_response.status_code == 200:
                        delete_result = delete_response.json()
                        if delete_result.get('status') == 'OK':
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {name} (ID: {job_id})")
                            deleted_count += 1
                        else:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ {job_id}: {delete_result.get('message')}")
                    else:
                        print(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {job_id}: {delete_response.status_code}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è {job_id}: {e}")
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏ –¥–ª—è FastCron
                time.sleep(1)
        
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–¥–∞–Ω–∏–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
        return False

def schedule_floating_island_sequence(start_date: datetime = None, count: int = 30):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Floating Island –≤ FastCron
    FastCron –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ
    """
    try:
        from floating_island_bot import calculate_next_events
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å floating_island_bot")
        return False
    
    if not validate_environment():
        return False
    
    if not start_date:
        start_date = datetime.now(pytz.UTC)
    
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º {count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Floating Island —á–µ—Ä–µ–∑ FastCron")
    print(f"‚è∞ –ù–∞—á–∏–Ω–∞—è —Å: {start_date.strftime('%d.%m.%Y %H:%M')} UTC")
    print("=" * 60)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    print("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è...")
    cleanup_old_jobs()
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    events = calculate_next_events(start_date, count=count)
    
    scheduled_count = 0
    failed_count = 0
    skipped_count = 0
    
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(events)} —Å–æ–±—ã—Ç–∏–π...")
    print("-" * 60)
    
    for i, event in enumerate(events, 1):
        notification_time = event['notification_time']
        event_start = event['event_start']
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º
        if notification_time <= start_date:
            print(f"‚è≠Ô∏è –°–æ–±—ã—Ç–∏–µ {i}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–≤ –ø—Ä–æ—à–ª–æ–º)")
            skipped_count += 1
            continue
        
        print(f"\nüìå –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ {i}/{len(events)}:")
        print(f"   üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
        print(f"   üéà –°–æ–±—ã—Ç–∏–µ: {event_start.strftime('%d.%m.%Y %H:%M')} UTC")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        time_until = (notification_time - start_date).total_seconds()
        hours_until = int(time_until // 3600)
        print(f"   ‚è∞ –ß–µ—Ä–µ–∑: {hours_until} —á–∞—Å–æ–≤")
        
        title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
        job_id = create_precise_notification_job(notification_time, title)
        
        if job_id:
            scheduled_count += 1
            print(f"   ‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (FastCron ID: {job_id})")
        else:
            failed_count += 1
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # FastCron –±–æ–ª–µ–µ —Ç–µ—Ä–ø–∏–º - –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—É–∑—ã
        if i < len(events) and i % 10 == 0:
            # –ü–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 10 –∑–∞–¥–∞–Ω–∏–π
            print(f"   ‚è∏Ô∏è –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥—ã–µ 10 –∑–∞–¥–∞–Ω–∏–π)...")
            time.sleep(5)
        elif i < len(events):
            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)  # –í—Å–µ–≥–æ 2 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 20!
    
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø FASTCRON:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—Ä–æ—à–ª—ã–µ): {skipped_count}")
    print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    
    if scheduled_count > 0:
        print(f"\nüéâ FastCron —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print(f"üí° FastCron: –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ–Ω—å—à–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
        return False

def get_scheduled_jobs():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è FastCron Floating Island
    """
    if not validate_environment():
        return
    
    try:
        response = requests.get(
            f"{FASTCRON_BASE_URL}/crontab",
            params={'token': FASTCRON_API_KEY},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'OK':
                crons = result.get('crons', [])
                floating_jobs = [cron for cron in crons if 'Floating Island' in cron.get('name', '')]
                
                if not floating_jobs:
                    print("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π Floating Island –≤ FastCron")
                    return
                
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(floating_jobs)} –∑–∞–¥–∞–Ω–∏–π Floating Island –≤ FastCron:")
                print("=" * 80)
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                checker_jobs = []
                scheduled_jobs = []
                
                for job in floating_jobs:
                    if 'Checker' in job.get('name', ''):
                        checker_jobs.append(job)
                    else:
                        scheduled_jobs.append(job)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                if checker_jobs:
                    print("üîÑ –û–°–ù–û–í–ù–´–ï –ó–ê–î–ê–ù–ò–Ø (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ):")
                    for job in checker_jobs:
                        job_id = job.get('id')
                        name = job.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        status = job.get('status', 0)
                        cron_expr = job.get('cron', '')
                        
                        status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if status == 1 else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
                        print(f"  {status_text} {name} (ID: {job_id})")
                        print(f"    Cron: {cron_expr}")
                    print()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if scheduled_jobs:
                    print("üìÖ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è)
                    scheduled_jobs.sort(key=lambda x: x.get('name', ''))
                    
                    for job in scheduled_jobs[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                        job_id = job.get('id')
                        name = job.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        status = job.get('status', 0)
                        cron_expr = job.get('cron', '')
                        
                        status_text = "üü¢" if status == 1 else "üî¥"
                        print(f"  {status_text} {name} (ID: {job_id})")
                        print(f"    Cron: {cron_expr}")
                    
                    if len(scheduled_jobs) > 15:
                        print(f"  ... –∏ –µ—â–µ {len(scheduled_jobs) - 15} –∑–∞–¥–∞–Ω–∏–π")
                
                print(f"\nüìä –í–°–ï–ì–û FASTCRON: {len(floating_jobs)} –∑–∞–¥–∞–Ω–∏–π")
                print(f"üí° FastCron –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã —á–µ–º cron-job.org")
            else:
                print(f"‚ùå FastCron API –æ—à–∏–±–∫–∞: {result.get('message')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è FastCron"""
    if len(sys.argv) < 2:
        print("üìÖ FASTCRON SCHEDULER - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π Floating Island")
        print("=" * 60)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python fastcron_scheduler.py schedule [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]  - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è")
        print("  python fastcron_scheduler.py list                   - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
        print("  python fastcron_scheduler.py cleanup                - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ")
        print("  python fastcron_scheduler.py test                   - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
        print()
        print("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ FastCron:")
        print("‚Ä¢ –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã API")
        print("‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–∞—É–∑—ã 2 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 20)")
        print("‚Ä¢ –ú—è–≥–∫–æ–µ rate limiting")
        print("‚Ä¢ –ù–∞–¥–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python fastcron_scheduler.py schedule 50    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å 50 —Å–æ–±—ã—Ç–∏–π")
        print("  python fastcron_scheduler.py schedule       # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å 30 —Å–æ–±—ã—Ç–∏–π")
        return
    
    command = sys.argv[1].lower()
    
    if command == 'schedule':
        count = 30
        if len(sys.argv) > 2:
            try:
                count = int(sys.argv[2])
                if count <= 0 or count > 100:
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
                    return
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
                return
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º FastCron –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {count} —Å–æ–±—ã—Ç–∏–π...")
        schedule_floating_island_sequence(count=count)
        
    elif command == 'list':
        get_scheduled_jobs()
        
    elif command == 'cleanup':
        print("üßπ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö FastCron –∑–∞–¥–∞–Ω–∏–π...")
        cleanup_old_jobs()
        
    elif command == 'test':
        print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FASTCRON –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        if validate_environment():
            try:
                from setup_fastcron import test_fastcron_connection, test_github_connection
                test_fastcron_connection()
                test_github_connection()
            except ImportError:
                print("‚ö†Ô∏è –ú–æ–¥—É–ª—å setup_fastcron –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: schedule, list, cleanup, test")

if __name__ == "__main__":
    main()