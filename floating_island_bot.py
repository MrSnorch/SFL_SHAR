#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import requests
import json
from datetime import datetime, timedelta
import pytz

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è Floating Island
# –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: 19.08.2025 16:00 UTC (–≤—Ä–µ–º—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞)
BASE_EVENT_TIME = datetime(2025, 8, 19, 16, 0, 0, tzinfo=pytz.UTC)
EVENT_INTERVAL = timedelta(hours=8, minutes=20)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
NOTIFICATION_ADVANCE = timedelta(minutes=0)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞
EVENT_DURATION = timedelta(minutes=30)  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è webhook
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
GITHUB_TOKEN = os.environ.get('GH_TOKEN')

def validate_webhook_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ webhook URL"""
    if not url:
        return False, "URL –Ω–µ –∑–∞–¥–∞–Ω"
    
    if not url.startswith('https://api.github.com/repos/'):
        return False, "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://api.github.com/repos/"
    
    if not url.endswith('/dispatches'):
        return False, "URL –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ /dispatches"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL
    parts = url.replace('https://api.github.com/repos/', '').replace('/dispatches', '').split('/')
    if len(parts) != 2 or not all(parts):
        return False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: https://api.github.com/repos/{owner}/{repo}/dispatches"
    
    return True, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –≤–ª–∞–¥–µ–ª–µ—Ü={parts[0]}, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π={parts[1]}"

def get_github_dispatch_url(webhook_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è GitHub Actions dispatches"""
    if not webhook_url:
        return None
    
    try:
        if webhook_url.startswith('https://api.github.com/repos/'):
            url_parts = webhook_url.replace('https://api.github.com/repos/', '').split('/')
            if len(url_parts) >= 2:
                owner, repo = url_parts[0], url_parts[1]
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è dispatches —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º workflow ID
                return f"https://api.github.com/repos/{owner}/{repo}/actions/workflows/184853159/dispatches"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è GitHub dispatch URL: {e}")
        return None
    
    return None

def send_telegram_message(message: str, parse_mode: str = 'HTML'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not BOT_TOKEN or not CHAT_ID:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram")
        print(f"BOT_TOKEN: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"CHAT_ID: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if CHAT_ID else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return False
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': parse_mode
    }
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        
        if response.status_code == 200:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        elif response.status_code == 400:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            payload['parse_mode'] = None
            response = requests.post(url, json=payload, timeout=15)
            if response.status_code == 200:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return False

def calculate_next_events(from_time: datetime, count: int = 10):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è Floating Island"""
    events = []
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    current_event = BASE_EVENT_TIME
    while current_event < from_time:
        current_event += EVENT_INTERVAL
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    for i in range(count):
        event_start = current_event
        event_end = event_start + EVENT_DURATION
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è
        notification_time = event_start - NOTIFICATION_ADVANCE
        
        events.append({
            'notification_time': notification_time,
            'event_start': event_start,
            'event_end': event_end,
            'event_number': i + 1
        })
        
        current_event += EVENT_INTERVAL
    
    return events

def get_current_notification_event():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ—Ç–æ—Ä–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–π—á–∞—Å (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±2 –º–∏–Ω—É—Ç)"""
    now = datetime.now(pytz.UTC)
    tolerance = timedelta(minutes=5)  # –î–æ–ø—É—Å–∫ ¬±5 –º–∏–Ω—É—Ç
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞: {now.strftime('%Y-%m-%d %H:%M:%S')} UTC")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
    events = calculate_next_events(now - timedelta(days=1), count=100)
    
    for event in events:
        notification_time = event['notification_time']
        time_diff = abs((now - notification_time).total_seconds())
        
        if time_diff <= tolerance.total_seconds():
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ä–∞–∑–Ω–∏—Ü–∞ {time_diff:.0f} —Å–µ–∫—É–Ω–¥")
            print(f"üìÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
            print(f"üéà –°–æ–±—ã—Ç–∏–µ: {event['event_start'].strftime('%d.%m.%Y %H:%M')} UTC")
            return event
    
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–æ–ø—É—Å–∫ ¬±{tolerance.total_seconds():.0f} —Å–µ–∫—É–Ω–¥)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    next_event = get_next_notification_event()
    if next_event:
        nt = next_event['notification_time']
        et = next_event['event_start']
        time_until = (nt - now).total_seconds()
        print(f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {nt.strftime('%d.%m.%Y %H:%M')} UTC")
        print(f"üéà –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ: {et.strftime('%d.%m.%Y %H:%M')} UTC")
        print(f"‚è∞ –î–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {time_until/3600:.1f} —á–∞—Å–æ–≤")
    
    return None

def get_next_notification_event():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    now = datetime.now(pytz.UTC)
    events = calculate_next_events(now, count=10)
    
    for event in events:
        if event['notification_time'] > now:
            return event
    
    return None

def format_notification_message(event):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –º–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    event_start = event['event_start']
    event_end = event['event_end']
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+2/+3)
    kiev_tz = pytz.timezone('Europe/Kiev')
    event_start_kiev = event_start.astimezone(kiev_tz)
    event_end_kiev = event_end.astimezone(kiev_tz)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
    now = datetime.now(pytz.UTC)
    next_events = calculate_next_events(now, count=5)
    
    next_event = None
    for next_ev in next_events:
        if next_ev['event_start'] > event['event_start']:
            next_event = next_ev
            break
    
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    message = f"–ï–ë–£–ß–ò–ô –®–ê–† –ø—Ä–∏–±—ã–ª!\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if next_event:
        next_kiev = next_event['event_start'].astimezone(kiev_tz)
        message += f"–°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–±—ã—Ç–∏–µ: {next_kiev.strftime('%H:%M')}"
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è
        next_time = event_start + EVENT_INTERVAL
        next_kiev = next_time.astimezone(kiev_tz)
        message += f"–°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–±—ã—Ç–∏–µ: {next_kiev.strftime('%H:%M')}"
    
    return message

def schedule_next_notification():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å–Ω–∞—á–∞–ª–∞ FastCron, –ø–æ—Ç–æ–º cron-job.org)"""
    next_event = get_next_notification_event()
    if not next_event:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    notification_time = next_event['notification_time']
    event_start = next_event['event_start']
    
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
    print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
    print(f"   –°–æ–±—ã—Ç–∏–µ: {event_start.strftime('%d.%m.%Y %H:%M')} UTC")
    print(f"   –í –º–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º FastCron (–ª—É—á—à–µ —Å rate limiting)
    try:
        from setup_fastcron import create_single_notification_job as create_fastcron_job
        fastcron_api_key = os.environ.get('FASTCRON_API_KEY')
        if fastcron_api_key:
            print(f"üöÄ –ü—Ä–æ–±—É–µ–º FastCron API...")
            result = create_fastcron_job(notification_time)
            if result:
                print(f"‚úÖ FastCron: —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
                return result
            else:
                print(f"‚ö†Ô∏è FastCron –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º cron-job.org...")
        else:
            print(f"üìù FASTCRON_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–±—É–µ–º cron-job.org...")
    except ImportError:
        print(f"üìù –ú–æ–¥—É–ª—å setup_fastcron –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º cron-job.org...")
    
    # –û—Ç–∫–∞—Ç –Ω–∞ cron-job.org
    try:
        from setup_cronjob import create_single_notification_job as create_cronjob_job
        return create_cronjob_job(notification_time)
    except ImportError as e:
        print(f"‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        return False

def show_schedule_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
    now = datetime.now(pytz.UTC)
    events = calculate_next_events(now, count=5)
    
    print(f"üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï FLOATING ISLAND")
    print("=" * 50)
    print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')} UTC")
    print(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {EVENT_INTERVAL.total_seconds()/3600:.1f} —á–∞—Å–æ–≤")
    print(f"‚è≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤ –º–æ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è")
    print(f"üéà –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {EVENT_DURATION.seconds//60} –º–∏–Ω—É—Ç")
    print()
    
    kiev_tz = pytz.timezone('Europe/Kiev')
    
    for i, event in enumerate(events, 1):
        notification_time = event['notification_time']
        event_start = event['event_start']
        
        nt_kiev = notification_time.astimezone(kiev_tz)
        et_kiev = event_start.astimezone(kiev_tz)
        
        time_until_notification = (notification_time - now).total_seconds()
        time_until_event = (event_start - now).total_seconds()
        
        print(f"üéà –°–æ–±—ã—Ç–∏–µ {i}:")
        print(f"   üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {nt_kiev.strftime('%d.%m %H:%M')} (–ö–∏–µ–≤)")
        print(f"   üéà –°–æ–±—ã—Ç–∏–µ: {et_kiev.strftime('%d.%m %H:%M')} (–ö–∏–µ–≤)")
        
        if time_until_notification > 0:
            hours = int(time_until_notification // 3600)
            print(f"   ‚è∞ –î–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {hours} —á.")
        elif time_until_event > 0:
            hours = int(time_until_event // 3600)
            print(f"   ‚è∞ –î–æ —Å–æ–±—ã—Ç–∏—è: {hours} —á.")
        else:
            print(f"   ‚úÖ –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ—à–ª–æ")
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ"""
    print(f"ü§ñ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ Floating Island Bot...")
    print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')} UTC")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    if len(sys.argv) > 1:
        if sys.argv[1] == '--test' or sys.argv[1] == '--test-send':
            test_notification()
            return
        elif sys.argv[1] == '--schedule':
            show_schedule_info()
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    current_event = get_current_notification_event()
    
    if current_event:
        print(f"üö® –û—Å—Ç—Ä–æ–≤ –ü–û–Ø–í–ò–õ–°–Ø! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
        notification_time = current_event['notification_time']
        event_start = current_event['event_start']
        
        print(f"   –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_time.strftime('%H:%M')} UTC")
        print(f"   –û—Å—Ç—Ä–æ–≤ –ø–æ—è–≤–∏–ª—Å—è: {event_start.strftime('%H:%M')} UTC")
        
        message = format_notification_message(current_event)
        
        if send_telegram_message(message):
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            print(f"\nüîÑ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
            if schedule_next_notification():
                print(f"‚úÖ –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    else:
        print("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –≤ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        next_event = get_next_notification_event()
        if next_event:
            nt = next_event['notification_time']
            et = next_event['event_start']
            print(f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {nt.strftime('%d.%m.%Y %H:%M')} UTC")
            print(f"üéà –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ: {et.strftime('%d.%m.%Y %H:%M')} UTC")

def test_notification():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    print("üßë‚Äçüî¨ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    now = datetime.now(pytz.UTC)
    print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {now.strftime('%Y-%m-%d %H:%M:%S')} UTC")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    if not CHAT_ID:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print(f"ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {BOT_TOKEN[:10]}...{BOT_TOKEN[-4:]}")
    print(f"üí¨ Chat ID: {CHAT_ID}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
    next_event = get_next_notification_event()
    if next_event:
        nt = next_event['notification_time']
        et = next_event['event_start']
        kiev_tz = pytz.timezone('Europe/Kiev')
        et_kiev = et.astimezone(kiev_tz)
        
        print(f"üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ:")
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {nt.strftime('%d.%m.%Y %H:%M')} UTC")
        print(f"   –°–æ–±—ã—Ç–∏–µ: {et_kiev.strftime('%d.%m.%Y %H:%M')} (–ö–∏–µ–≤)")
        print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = f"""üßë‚Äçüî¨ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>

‚úÖ –ë–æ—Ç Floating Island —Ä–∞–±–æ—Ç–∞–µ—Ç!

üìÖ <b>–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:</b> {now.strftime('%d.%m.%Y %H:%M:%S')} UTC
üì∂ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç
üéà <b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</b> –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

‚è∞ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –º–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏: {EVENT_INTERVAL.total_seconds()/3600:.1f} —á–∞—Å–æ–≤
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è: {EVENT_DURATION.seconds//60} –º–∏–Ω—É—Ç

üîî –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if send_telegram_message(test_message):
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    main()