#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import json
from datetime import datetime, timedelta
import pytz

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è Floating Island
# –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: 19.08.2025 16:00 UTC (–≤—Ä–µ–º—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞)
BASE_EVENT_TIME = datetime(2025, 8, 19, 16, 0, 0, tzinfo=pytz.UTC)
EVENT_INTERVAL = timedelta(hours=8, minutes=20)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
NOTIFICATION_ADVANCE = timedelta(minutes=0)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –í –ú–û–ú–ï–ù–¢ —Å–æ–±—ã—Ç–∏—è
EVENT_DURATION = timedelta(minutes=30)  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è

def send_telegram_message(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not BOT_TOKEN or not CHAT_ID:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return False
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return False

def calculate_next_events(from_time: datetime, count: int = 10):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è Floating Island"""
    events = []
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    current_event = BASE_EVENT_TIME
    while current_event < from_time:
        current_event += EVENT_INTERVAL
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    for i in range(count):
        event_start = current_event
        event_end = event_start + EVENT_DURATION
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è
        notification_time = event_start - NOTIFICATION_ADVANCE  # = event_start (—Ç–∞–∫ –∫–∞–∫ NOTIFICATION_ADVANCE = 0)
        
        events.append({
            'notification_time': notification_time,
            'event_start': event_start,
            'event_end': event_end,
            'event_number': i + 1
        })
        
        current_event += EVENT_INTERVAL
    
    return events

def get_current_notification_event():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±2 –º–∏–Ω—É—Ç)"""
    now = datetime.now(pytz.UTC)
    tolerance = timedelta(minutes=2)  # –î–æ–ø—É—Å–∫ ¬±2 –º–∏–Ω—É—Ç—ã
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞: {now.strftime('%Y-%m-%d %H:%M:%S')} UTC")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
    events = calculate_next_events(now - timedelta(days=1), count=100)
    
    for event in events:
        notification_time = event['notification_time']
        time_diff = abs((now - notification_time).total_seconds())
        
        if time_diff <= tolerance.total_seconds():
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ä–∞–∑–Ω–∏—Ü–∞ {time_diff:.0f} —Å–µ–∫—É–Ω–¥")
            return event
    
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–æ–ø—É—Å–∫ ¬±{tolerance.total_seconds():.0f} —Å–µ–∫—É–Ω–¥)")
    return None

def get_next_notification_event():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    now = datetime.now(pytz.UTC)
    events = calculate_next_events(now, count=5)
    
    for event in events:
        if event['notification_time'] > now:
            return event
    
    return None

def format_notification_message(event):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    now = datetime.now(pytz.UTC)
    next_events = calculate_next_events(now, count=2)
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
    next_event = None
    for next_ev in next_events:
        if next_ev['event_start'] > event['event_start']:
            next_event = next_ev
            break
    
    message = "–ï–ë–£–ß–ò–ô –®–ê–† –ø—Ä–∏–±—ã–ª!"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–±—ã—Ç–∏—è
    if next_event:
        next_time = next_event['event_start'].strftime('%H:%M')
        message += f"\n\n–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∏–±—ã—Ç–∏–µ –≤ {next_time}"
    
    return message

def schedule_next_notification():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ cron-job.org"""
    next_event = get_next_notification_event()
    if not next_event:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    notification_time = next_event['notification_time']
    event_start = next_event['event_start']
    
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
    print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
    print(f"   –°–æ–±—ã—Ç–∏–µ: {event_start.strftime('%d.%m.%Y %H:%M')} UTC")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    try:
        from setup_cronjob import create_single_notification_job
        return create_single_notification_job(notification_time)
    except ImportError:
        print("‚ö†Ô∏è –ú–æ–¥—É–ª—å setup_cronjob –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ"""
    print(f"ü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Floating Island...")
    print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')} UTC")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    current_event = get_current_notification_event()
    
    if current_event:
        print(f"üö® –û—Å—Ç—Ä–æ–≤ –ü–û–Ø–í–ò–õ–°–Ø! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
        notification_time = current_event['notification_time']
        event_start = current_event['event_start']
        
        print(f"   –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_time.strftime('%H:%M')} UTC")
        print(f"   –û—Å—Ç—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω: {event_start.strftime('%H:%M')} UTC")
        
        message = format_notification_message(current_event)
        
        if send_telegram_message(message):
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            print(f"\nüîÑ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
            if schedule_next_notification():
                print(f"‚úÖ –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    else:
        print("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –≤ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        next_event = get_next_notification_event()
        if next_event:
            nt = next_event['notification_time']
            print(f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {nt.strftime('%d.%m.%Y %H:%M')} UTC")

def test_notification():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    print("üßë‚Äçüî¨ –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    now = datetime.now(pytz.UTC)
    print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {now.strftime('%Y-%m-%d %H:%M:%S')} UTC")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    if not CHAT_ID:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print(f"ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {BOT_TOKEN[:10]}...{BOT_TOKEN[-4:]}")
    print(f"üí¨ Chat ID: {CHAT_ID}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = f"""üßë‚Äçüî¨ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´</b>

‚úÖ –ë–æ—Ç Floating Island —Ä–∞–±–æ—Ç–∞–µ—Ç!

üìÖ <b>–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:</b> {now.strftime('%d.%m.%Y %H:%M:%S')} UTC
üì∂ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç
üèùÔ∏è <b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</b> –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

‚è∞ –ë–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: <code>29.08.2025 01:00 UTC</code>

üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞!"""
    
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print("-" * 50)
    print(test_message)
    print("-" * 50)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    success = send_telegram_message(test_message)
    
    if success:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
        print("üì° –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É")
        print("üèùÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Floating Island –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å TELEGRAM_BOT_TOKEN")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å TELEGRAM_CHAT_ID")
        print("   - –î–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø—É")
        print("   - –ï—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        return False

def test_mode():
    """–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    print("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú")
    print("=" * 50)
    
    now = datetime.now(pytz.UTC)
    print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')} UTC")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 5 —Å–æ–±—ã—Ç–∏–π
    events = calculate_next_events(now, count=5)
    
    print(f"\nüìÖ –ë–ª–∏–∂–∞–π—à–∏–µ 5 —Å–æ–±—ã—Ç–∏–π Floating Island:")
    print("-" * 50)
    
    for i, event in enumerate(events, 1):
        notification_time = event['notification_time']
        event_start = event['event_start']
        event_end = event['event_end']
        
        print(f"{i}. –û—Å—Ç—Ä–æ–≤ –ø–æ—è–≤–ª—è–µ—Ç—Å—è: {notification_time.strftime('%d.%m %H:%M')} UTC")
        print(f"   –î–æ—Å—Ç—É–ø–µ–Ω:         {event_start.strftime('%d.%m %H:%M')} - {event_end.strftime('%H:%M')} UTC")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
    print("-" * 50)
    current_event = get_current_notification_event()
    if current_event:
        print("üîî –¢–ï–ö–£–©–ï–ï –°–û–ë–´–¢–ò–ï –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
        message = format_notification_message(current_event)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}\n")
        print("üì§ –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    else:
        print("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        next_event = get_next_notification_event()
        if next_event:
            nt = next_event['notification_time']
            et = next_event['event_start']
            time_until = nt - now
            hours = int(time_until.total_seconds() // 3600)
            minutes = int((time_until.total_seconds() % 3600) // 60)
            
            print(f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {nt.strftime('%d.%m.%Y %H:%M')} UTC")
            print(f"üèùÔ∏è –°–æ–±—ã—Ç–∏–µ: {et.strftime('%d.%m.%Y %H:%M')} UTC")
            print(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á–∞—Å {minutes} –º–∏–Ω—É—Ç")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == '--test':
            test_mode()
        elif sys.argv[1] == '--test-send':
            test_notification()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:")
            print("  --test      - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            print("  --test-send - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    else:
        main()
