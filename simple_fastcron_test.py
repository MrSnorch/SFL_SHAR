#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import json
from datetime import datetime, timedelta
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
FASTCRON_API_KEY = os.environ.get('FASTCRON_API_KEY', 'your-fastcron-api-key')
FASTCRON_BASE_URL = 'https://app.fastcron.com/api'

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://api.github.com/repos/test/test/actions/workflows/12345/dispatches')
GITHUB_TOKEN = os.environ.get('GH_TOKEN', 'ghp_test-token')

def test_fastcron_post_request():
    """–¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞ –∫ FastCron API"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POST –ó–ê–ü–†–û–°–ê –ö FASTCRON API")
    print("=" * 50)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞
    test_time = datetime.now(pytz.UTC) + timedelta(minutes=1)
    
    # –°–æ–∑–¥–∞–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    cron_expression = f"{test_time.minute} {test_time.hour} {test_time.day} {test_time.month} *"
    
    print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {test_time.strftime('%Y-%m-%d %H:%M:%S')} UTC")
    print(f"‚öôÔ∏è Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {cron_expression}")
    print()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º postData –¥–ª—è GitHub webhook
    post_data = json.dumps({
        "event_type": "test_event",
        "client_payload": {
            "test_time": test_time.isoformat(),
            "test": True
        },
        "ref": "main"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è GitHub Actions
    })
    
    # HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
    http_headers = f"Authorization: token {GITHUB_TOKEN}\\r\\nAccept: application/vnd.github.v3+json\\r\\nContent-Type: application/json"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è FastCron API
    payload = {
        'token': FASTCRON_API_KEY,
        'name': f'Test Job {test_time.strftime("%H:%M")}',
        'expression': cron_expression,
        'url': WEBHOOK_URL,
        'httpMethod': 'POST',
        'postData': post_data,
        'httpHeaders': http_headers,
        'timezone': 'UTC',
        'notify': 'false'
    }
    
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ FastCron API...")
    print(f"üîó URL: {FASTCRON_BASE_URL}/v1/cron_add")
    print()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{FASTCRON_BASE_URL}/v1/cron_add",
            json=payload,
            timeout=30
        )
        
        print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
        try:
            result = response.json()
            print(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (JSON):")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            
            if response.status_code == 200 and result.get('status') == 'success':
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                job_id = result.get('data', {}).get('id')
                if job_id:
                    print(f"üÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {job_id}")
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                    delete_test_job(job_id)
                return True
            else:
                print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è")
                print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                return False
                
        except json.JSONDecodeError:
            print("üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç):")
            print(response.text)
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def delete_test_job(job_id):
    """–£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
    print(f"\nüóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ {job_id}...")
    
    try:
        response = requests.post(
            f"{FASTCRON_BASE_URL}/v1/cron_delete",
            json={
                'token': FASTCRON_API_KEY,
                'id': job_id
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")

def test_fastcron_list():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
    print("\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –ó–ê–î–ê–ù–ò–ô")
    print("=" * 50)
    
    try:
        response = requests.post(
            f"{FASTCRON_BASE_URL}/v1/cron_list",
            json={'token': FASTCRON_API_KEY},
            timeout=30
        )
        
        print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ")
                crons = result.get('data', [])
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(crons)}")
                for i, cron in enumerate(crons[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞–Ω–∏—è
                    print(f"  {i+1}. {cron.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {cron.get('id')})")
                if len(crons) > 3:
                    print(f"  ... –∏ –µ—â–µ {len(crons) - 3} –∑–∞–¥–∞–Ω–∏–π")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(response.text)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢ FASTCRON API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if FASTCRON_API_KEY == 'your-fastcron-api-key':
        print("‚ö†Ô∏è  –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω FASTCRON_API_KEY")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–∫—Ä–∏–ø—Ç–µ")
        exit(1)
    
    print(f"üîë API –∫–ª—é—á: {FASTCRON_API_KEY[:10]}...{FASTCRON_API_KEY[-4:]}")
    print(f"üîó –ë–∞–∑–æ–≤—ã–π URL: {FASTCRON_BASE_URL}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    success1 = test_fastcron_post_request()
    success2 = test_fastcron_list()
    
    print("\n" + "=" * 50)
    if success1 and success2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ FastCron API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")