#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import json
import time
from datetime import datetime, timedelta
import pytz

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è cron-job.org
CRONJOB_API_KEY = os.environ.get('CRONJOB_API_KEY')
CRONJOB_BASE_URL = 'https://api.cron-job.org'

# URL –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (—á–µ—Ä–µ–∑ GitHub Actions)
# –§–æ—Ä–º–∞—Ç: https://api.github.com/repos/{owner}/{repo}/dispatches
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
GITHUB_TOKEN = os.environ.get('GH_TOKEN')

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    errors = []
    
    if not CRONJOB_API_KEY:
        errors.append("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
    
    if not WEBHOOK_URL:
        errors.append("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL")
    elif not WEBHOOK_URL.startswith('https://api.github.com/repos/'):
        errors.append("‚ùå WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å GitHub API URL: https://api.github.com/repos/{owner}/{repo}/dispatches")
    
    if not GITHUB_TOKEN:
        errors.append("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GH_TOKEN")
    
    if errors:
        print("\n".join(errors))
        print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        print("1. CRONJOB_API_KEY - API –∫–ª—é—á —Å —Å–∞–π—Ç–∞ cron-job.org")
        print("2. WEBHOOK_URL - https://api.github.com/repos/{username}/{repo}/dispatches")
        print("3. GH_TOKEN - Personal Access Token —Å –ø—Ä–∞–≤–∞–º–∏ 'repo' –∏ 'workflow'")
        return False
    
    return True

def test_cronjob_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ cron-job.org API"""
    if not CRONJOB_API_KEY:
        return False
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(f"{CRONJOB_BASE_URL}/jobs", headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ cron-job.org API —É—Å–ø–µ—à–Ω–æ")
            return True
        elif response.status_code == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á cron-job.org")
            return False
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ cron-job.org: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ cron-job.org: {e}")
        return False

def test_github_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub API"""
    if not WEBHOOK_URL or not GITHUB_TOKEN:
        return False
    
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
    }
    
    test_payload = {
        'event_type': 'test_connection',
        'client_payload': {
            'test': True,
            'timestamp': datetime.now(pytz.UTC).isoformat()
        }
    }
    
    try:
        response = requests.post(WEBHOOK_URL, headers=headers, json=test_payload, timeout=10)
        
        if response.status_code == 204:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub API —É—Å–ø–µ—à–Ω–æ")
            return True
        elif response.status_code == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π GitHub —Ç–æ–∫–µ–Ω")
            return False
        elif response.status_code == 404:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return False
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ GitHub: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub: {e}")
        return False

def create_single_notification_job(notification_time: datetime, retry_count: int = 3):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ —Ç–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    –° —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limiting –∏ –æ—à–∏–±–æ–∫
    """
    if not validate_environment():
        return False
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è cron
    minute = notification_time.minute
    hour = notification_time.hour
    day = notification_time.day
    month = notification_time.month
    
    title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    job_data = {
        'job': {
            'url': WEBHOOK_URL,
            'enabled': True,
            'title': title,
            'schedule': {
                'timezone': 'UTC',
                'hours': [hour],
                'minutes': [minute],
                'mdays': [day],
                'months': [month],
                'wdays': [-1]
            },
            'requestMethod': 1,  # POST
            'requestHeaders': [
                {
                    'name': 'Authorization',
                    'value': f'token {GITHUB_TOKEN}'
                },
                {
                    'name': 'Accept',
                    'value': 'application/vnd.github.v3+json'
                },
                {
                    'name': 'Content-Type',
                    'value': 'application/json'
                }
            ],
            'requestBody': json.dumps({
                'ref': 'main',
                'inputs': {
                    'action': 'notify'
                }
            })
        }
    }
    
    for attempt in range(retry_count):
        try:
            response = requests.put(
                f"{CRONJOB_BASE_URL}/jobs",
                headers=headers,
                json=job_data,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                result = response.json()
                job_id = result.get('jobId')
                print(f"‚úÖ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (ID: {job_id})")
                print(f"üïê –í—Ä–µ–º—è: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
                return job_id
            elif response.status_code == 429:
                # Rate limiting - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                wait_time = (attempt + 1) * 25  # 25, 50, 75 —Å–µ–∫—É–Ω–¥
                print(f"‚è≥ Rate limit (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count}). –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
                time.sleep(wait_time)
                continue
            elif response.status_code == 401:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ cron-job.org. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < retry_count - 1:
                time.sleep(5)
                continue
            return False
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫")
    return False

def create_cronjob_schedule():
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ cron-job.org –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    """
    
    if not validate_environment():
        return False
    
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    if not test_cronjob_connection():
        return False
    
    if not test_github_connection():
        return False
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
    job_data = {
        'job': {
            'url': WEBHOOK_URL,
            'enabled': True,
            'title': 'Floating Island Notifications Checker',
            'schedule': {
                'timezone': 'UTC',
                'hours': [-1],  # –∫–∞–∂–¥—ã–π —á–∞—Å
                'minutes': [0, 20, 40],  # –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
                'mdays': [-1],  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                'months': [-1],  # –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
                'wdays': [-1]   # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            },
            'requestMethod': 1,  # POST
            'requestHeaders': [
                {
                    'name': 'Authorization',
                    'value': f'token {GITHUB_TOKEN}'
                },
                {
                    'name': 'Accept',
                    'value': 'application/vnd.github.v3+json'
                },
                {
                    'name': 'Content-Type',
                    'value': 'application/json'
                }
            ],
            'requestBody': json.dumps({
                'ref': 'main',
                'inputs': {
                    'action': 'notify',
                    'type': 'periodic_check'
                }
            })
        }
    }
    
    try:
        response = requests.put(
            f"{CRONJOB_BASE_URL}/jobs",
            headers=headers,
            json=job_data,
            timeout=30
        )
        
        if response.status_code in [200, 201]:
            result = response.json()
            job_id = result.get('jobId')
            print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! Job ID: {job_id}")
            print(f"üîó URL: {WEBHOOK_URL}")
            print(f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç (:00, :20, :40)")
            print(f"üîë GitHub Token: {GITHUB_TOKEN[:10]}...{GITHUB_TOKEN[-4:]}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def list_existing_jobs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(f"{CRONJOB_BASE_URL}/jobs", headers=headers, timeout=30)
        
        if response.status_code == 200:
            jobs = response.json().get('jobs', [])
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –∑–∞–¥–∞–Ω–∏–π:")
            print("=" * 80)
            
            floating_jobs = []
            other_jobs = []
            
            for job in jobs:
                if 'Floating Island' in job.get('title', ''):
                    floating_jobs.append(job)
                else:
                    other_jobs.append(job)
            
            if floating_jobs:
                print(f"üéà Floating Island –∑–∞–¥–∞–Ω–∏—è ({len(floating_jobs)}):")
                for job in floating_jobs:
                    job_id = job.get('jobId')
                    title = job.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    enabled = job.get('enabled', False)
                    
                    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
                    print(f"  {status} ID: {job_id} - {title}")
            
            if other_jobs:
                print(f"\nüìå –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è ({len(other_jobs)}):")
                for job in other_jobs:
                    job_id = job.get('jobId')
                    title = job.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    enabled = job.get('enabled', False)
                    
                    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
                    print(f"  {status} ID: {job_id} - {title}")
                
        elif response.status_code == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á cron-job.org")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

def delete_job(job_id: str):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return False
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.delete(f"{CRONJOB_BASE_URL}/jobs/{job_id}", headers=headers, timeout=30)
        
        if response.status_code == 200:
            print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {job_id} —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        elif response.status_code == 404:
            print(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    import sys
    
    if len(sys.argv) < 2:
        print("üîß SETUP CRONJOB - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ cron-job.org")
        print("=" * 50)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python setup_cronjob.py list        - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è")
        print("  python setup_cronjob.py create      - —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
        print("  python setup_cronjob.py delete <ID> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID")
        print("  python setup_cronjob.py test        - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return
    
    command = sys.argv[1].lower()
    
    if command == 'list':
        list_existing_jobs()
    elif command == 'create':
        create_cronjob_schedule()
    elif command == 'delete' and len(sys.argv) > 2:
        job_id = sys.argv[2]
        delete_job(job_id)
    elif command == 'test':
        print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
        print("=" * 50)
        validate_environment()
        test_cronjob_connection()
        test_github_connection()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: list, create, delete <ID>, test")

if __name__ == "__main__":
    main()