#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import json
from datetime import datetime, timedelta
import pytz

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è cron-job.org
CRONJOB_API_KEY = os.environ.get('CRONJOB_API_KEY')
CRONJOB_BASE_URL = 'https://api.cron-job.org'

# URL –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (—á–µ—Ä–µ–∑ GitHub Actions –∏–ª–∏ –¥—Ä—É–≥–æ–π webhook)
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://api.github.com/repos/username/repo/dispatches

def create_single_notification_job(notification_time: datetime):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ —Ç–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return False
    
    if not WEBHOOK_URL:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL")
        return False
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è cron
    minute = notification_time.minute
    hour = notification_time.hour
    day = notification_time.day
    month = notification_time.month
    
    title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    job_data = {
        'job': {
            'url': WEBHOOK_URL,
            'enabled': True,
            'title': title,
            'schedule': {
                'timezone': 'UTC',
                'hours': [hour],
                'minutes': [minute],
                'mdays': [day],
                'months': [month],
                'wdays': [-1]
            },
            'requestMethod': 1,
            'requestHeaders': [
                {
                    'name': 'Content-Type',
                    'value': 'application/json'
                },
                {
                    'name': 'X-Notification-Type',
                    'value': 'floating-island-auto'
                }
            ],
            'requestBody': json.dumps({
                'event_type': 'floating_island_notification',
                'client_payload': {
                    'notification_time': notification_time.isoformat(),
                    'auto_scheduled': True
                }
            })
        }
    }
    
    try:
        response = requests.put(
            f"{CRONJOB_BASE_URL}/jobs",
            headers=headers,
            json=job_data,
            timeout=30
        )
        
        if response.status_code in [200, 201]:
            result = response.json()
            job_id = result.get('jobId')
            print(f"‚úÖ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (ID: {job_id})")
            return job_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def create_cronjob_schedule():
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ cron-job.org –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    """
    
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return False
    
    if not WEBHOOK_URL:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL")
        return False
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
    # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20 –º–∏–Ω—É—Ç
    job_data = {
        'job': {
            'url': WEBHOOK_URL,
            'enabled': True,
            'title': 'Floating Island Notifications',
            'schedule': {
                'timezone': 'UTC',
                'hours': [-1],  # –∫–∞–∂–¥—ã–π —á–∞—Å
                'minutes': [0, 20, 40],  # –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
                'mdays': [-1],  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                'months': [-1],  # –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
                'wdays': [-1]   # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            },
            'requestMethod': 1,  # POST
            'requestHeaders': [
                {
                    'name': 'Content-Type',
                    'value': 'application/json'
                }
            ],
            'requestBody': json.dumps({
                'event_type': 'floating_island_check',
                'client_payload': {}
            })
        }
    }
    
    try:
        response = requests.put(
            f"{CRONJOB_BASE_URL}/jobs",
            headers=headers,
            json=job_data,
            timeout=30
        )
        
        if response.status_code in [200, 201]:
            result = response.json()
            job_id = result.get('jobId')
            print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! Job ID: {job_id}")
            print(f"üîó URL: {WEBHOOK_URL}")
            print(f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç (:00, :20, :40)")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def list_existing_jobs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(f"{CRONJOB_BASE_URL}/jobs", headers=headers, timeout=30)
        
        if response.status_code == 200:
            jobs = response.json().get('jobs', [])
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –∑–∞–¥–∞–Ω–∏–π:")
            
            for job in jobs:
                job_id = job.get('jobId')
                title = job.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                enabled = job.get('enabled', False)
                url = job.get('url', '')
                
                status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
                print(f"  {status} ID: {job_id} - {title}")
                print(f"    URL: {url}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

def delete_job(job_id: str):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID"""
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return False
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.delete(f"{CRONJOB_BASE_URL}/jobs/{job_id}", headers=headers, timeout=30)
        
        if response.status_code == 200:
            print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {job_id} —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def setup_github_webhook():
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ GitHub webhook –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cron-job.org
    """
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê GITHUB WEBHOOK")
    print("=" * 50)
    print()
    print("1. –°–æ–∑–¥–∞–π—Ç–µ GitHub Personal Access Token:")
    print("   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Developer settings ‚Üí Personal access tokens")
    print("   - –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ 'repo' –∏ 'workflow'")
    print("   - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_TOKEN")
    print()
    print("2. –°–æ–∑–¥–∞–π—Ç–µ workflow —Ñ–∞–π–ª .github/workflows/floating-island.yml:")
    print()
    
    workflow_content = """name: Floating Island Notifications

on:
  repository_dispatch:
    types: [floating_island_check]
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytz

      - name: Run floating island bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "=== FLOATING ISLAND CHECK ==="
          python floating_island_bot.py
          echo "=== END CHECK ==="
"""
    
    print(workflow_content)
    print()
    print("3. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ GitHub:")
    print("   - TELEGRAM_BOT_TOKEN: —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞")
    print("   - TELEGRAM_CHAT_ID: ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print()
    print("4. URL –¥–ª—è webhook –±—É–¥–µ—Ç:")
    print("   https://api.github.com/repos/USERNAME/REPOSITORY/dispatches")
    print("   (–∑–∞–º–µ–Ω–∏—Ç–µ USERNAME –∏ REPOSITORY –Ω–∞ –≤–∞—à–∏)")
    print()
    print("5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   - CRONJOB_API_KEY: –∫–ª—é—á API –æ—Ç cron-job.org")
    print("   - WEBHOOK_URL: URL –∏–∑ –ø—É–Ω–∫—Ç–∞ 4")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω—é"""
    import sys
    
    if len(sys.argv) < 2:
        print("ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê CRON-JOB.ORG –î–õ–Ø FLOATING ISLAND")
        print("=" * 50)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python setup_cronjob.py create    - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
        print("  python setup_cronjob.py list      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è")
        print("  python setup_cronjob.py delete ID - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID")
        print("  python setup_cronjob.py setup     - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
        return
    
    command = sys.argv[1].lower()
    
    if command == 'create':
        create_cronjob_schedule()
    elif command == 'list':
        list_existing_jobs()
    elif command == 'delete' and len(sys.argv) > 2:
        job_id = sys.argv[2]
        delete_job(job_id)
    elif command == 'setup':
        setup_github_webhook()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: create, list, delete, setup")

if __name__ == "__main__":
    main()