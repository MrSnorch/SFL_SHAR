name: Floating Island Notifications

on:
  repository_dispatch:
    types: [floating_island_notification, floating_island_check, floating_island_schedule, test_connection]
  workflow_dispatch:
    inputs:
      action:
        description: 'Действие для выполнения'
        required: false
        default: 'notify'
        type: choice
        options:
        - notify
        - schedule
        - single-schedule
        - fastcron-schedule
        - fastcron-test
        - test-notification
        - test
        - test-send
        - cleanup
        - list
        - fastcron-post-test
      count:
        description: 'Количество событий для планирования (только для schedule)'
        required: false
        default: '30'
        type: string

jobs:
  notify:
    if: github.event.action == 'floating_island_notification' || github.event.action == 'floating_island_check' || github.event.inputs.action == 'notify' || github.event.inputs.action == 'test' || github.event.inputs.action == 'test-send'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run floating island bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== FLOATING ISLAND NOTIFICATION ==="
          echo "Время запуска: $(date -u)"
          echo "Событие: ${{ github.event.action }}"
          echo "Входной параметр: ${{ github.event.inputs.action }}"
          
          if [ "${{ github.event.inputs.action }}" = "test" ]; then
            echo "Тестовый режим (проверка расписания):"
            python floating_island_bot.py --test
          elif [ "${{ github.event.inputs.action }}" = "test-send" ]; then
            echo "Тест отправки сообщения:"
            python floating_island_bot.py --test-send
          else
            echo "Режим уведомлений:"
            python floating_island_bot.py
          fi
          echo "=== END NOTIFICATION ==="

  single-schedule:
    if: github.event.inputs.action == 'single-schedule'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Schedule single floating island event
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== SINGLE SCHEDULING FLOATING ISLAND ==="
          echo "Время запуска: $(date -u)"
          python single_scheduler.py
          echo "=== END SINGLE SCHEDULING ==="

  fastcron-schedule:
    if: github.event.inputs.action == 'fastcron-schedule'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Schedule with FastCron
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== FASTCRON SCHEDULING FLOATING ISLAND ==="
          echo "Время запуска: $(date -u)"
          COUNT="${{ github.event.inputs.count || '30' }}"
          echo "Планируем $COUNT событий через FastCron"
          python fastcron_scheduler_fixed.py schedule $COUNT
          echo "=== END FASTCRON SCHEDULING ==="

  test-notification:
    if: github.event.inputs.action == 'test-notification'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run notification test
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== TEST NOTIFICATION SYSTEM ==="
          echo "Время запуска: $(date -u)"
          echo "Запускаем полное тестирование уведомлений"
          python test_notification.py full
          echo "=== END TEST NOTIFICATION ==="

  fastcron-test:
    if: github.event.inputs.action == 'fastcron-test'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test FastCron connections
        env:
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== FASTCRON CONNECTION TEST ==="
          echo "Время запуска: $(date -u)"
          python setup_fastcron_fixed.py test
          echo "=== END FASTCRON TEST ==="

  schedule:
    if: github.event.inputs.action == 'schedule'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Schedule floating island events
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== SCHEDULING FLOATING ISLAND EVENTS ==="
          echo "Время запуска: $(date -u)"
          COUNT="${{ github.event.inputs.count || '30' }}"
          echo "Планируем $COUNT событий"
          python scheduler.py schedule $COUNT
          echo "=== END SCHEDULING ==="

  cleanup:
    if: github.event.inputs.action == 'cleanup'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cleanup old jobs
        env:
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
        run: |
          echo "=== CLEANING UP OLD JOBS ==="
          echo "Время запуска: $(date -u)"
          python scheduler.py cleanup
          python fastcron_scheduler_fixed.py cleanup
          echo "=== END CLEANUP ==="

  list:
    if: github.event.inputs.action == 'list'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: List scheduled jobs
        env:
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
        run: |
          echo "=== LISTING SCHEDULED JOBS ==="
          echo "Время запуска: $(date -u)"
          python scheduler.py list
          python fastcron_scheduler_fixed.py list
          echo "=== END LISTING ==="

  fastcron-post-test:
    if: github.event.inputs.action == 'fastcron-post-test'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test FastCron POST request
        env:
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== FASTCRON POST REQUEST TEST ==="
          echo "Время запуска: $(date -u)"
          echo "Тестируем POST запрос к FastCron API"
          
          # Создаем простой тестовый скрипт для POST запроса
          cat > fastcron_post_test.py << 'EOF'
#!/usr/bin/env python3
import os
import requests
import json
from datetime import datetime, timedelta
import pytz

FASTCRON_API_KEY = os.environ.get('FASTCRON_API_KEY')
FASTCRON_BASE_URL = 'https://app.fastcron.com/api'
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
GITHUB_TOKEN = os.environ.get('GH_TOKEN')

def test_fastcron_post():
    if not all([FASTCRON_API_KEY, WEBHOOK_URL, GITHUB_TOKEN]):
        print("❌ Не все переменные окружения установлены")
        return False
    
    # Вычисляем время через 1 минуту для теста
    test_time = datetime.now(pytz.UTC) + timedelta(minutes=1)
    cron_expression = f"{test_time.minute} {test_time.hour} {test_time.day} {test_time.month} *"
    
    print(f"⏰ Время теста: {test_time.strftime('%Y-%m-%d %H:%M:%S')} UTC")
    print(f"⚙️ Cron выражение: {cron_expression}")
    
    # Подготавливаем postData для GitHub webhook
    post_data = json.dumps({
        "event_type": "test_event",
        "client_payload": {
            "test_time": test_time.isoformat(),
            "test": True
        },
        "ref": "main"
    })
    
    # HTTP заголовки
    http_headers = f"Authorization: token {GITHUB_TOKEN}\\r\\nAccept: application/vnd.github.v3+json\\r\\nContent-Type: application/json"
    
    # Параметры для FastCron API
    payload = {
        'token': FASTCRON_API_KEY,
        'name': f'Test Job {test_time.strftime("%H:%M")}',
        'expression': cron_expression,
        'url': WEBHOOK_URL,
        'httpMethod': 'POST',
        'postData': post_data,
        'httpHeaders': http_headers,
        'timezone': 'UTC',
        'notify': 'false'
    }
    
    print("📤 Отправляем POST запрос к FastCron API...")
    
    try:
        response = requests.post(
            f"{FASTCRON_BASE_URL}/v1/cron_add",
            json=payload,
            timeout=30
        )
        
        print(f"📥 Статус ответа: {response.status_code}")
        
        try:
            result = response.json()
            print(f"📥 Ответ: {json.dumps(result, indent=2, ensure_ascii=False)}")
            
            if response.status_code == 200 and result.get('status') == 'success':
                print("✅ POST запрос выполнен успешно!")
                job_id = result.get('data', {}).get('id')
                if job_id:
                    print(f"🆔 ID созданного задания: {job_id}")
                    # Удаляем тестовое задание
                    delete_test_job(job_id)
                return True
            else:
                print("❌ Запрос не удался")
                return False
        except json.JSONDecodeError:
            print("📥 Текст ответа:")
            print(response.text)
            return False
            
    except Exception as e:
        print(f"❌ Ошибка: {e}")
        return False

def delete_test_job(job_id):
    print(f"🗑️ Удаляем тестовое задание {job_id}...")
    try:
        response = requests.post(
            f"https://app.fastcron.com/api/v1/cron_delete",
            json={
                'token': os.environ.get('FASTCRON_API_KEY'),
                'id': job_id
            },
            timeout=30
        )
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                print("✅ Тестовое задание удалено успешно")
            else:
                print(f"❌ Ошибка удаления: {result.get('message', 'Неизвестная ошибка')}")
        else:
            print(f"❌ Ошибка HTTP при удалении: {response.status_code}")
    except Exception as e:
        print(f"❌ Ошибка при удалении задания: {e}")

if __name__ == "__main__":
    test_fastcron_post()
EOF
          
          echo "🚀 Запускаем тест POST запроса..."
          python fastcron_post_test.py
          echo "=== END FASTCRON POST TEST ==="
