name: Floating Island Notifications

on:
  repository_dispatch:
    types: [floating_island_notification, floating_island_check, floating_island_schedule, test_connection]
  workflow_dispatch:
    inputs:
      action:
        description: 'Действие для выполнения'
        required: false
        default: 'notify'
        type: choice
        options:
        - notify
        - schedule
        - single-schedule
        - fastcron-schedule
        - fastcron-test
        - test-notification
        - test
        - test-send
        - cleanup
        - list
      count:
        description: 'Количество событий для планирования (только для schedule)'
        required: false
        default: '30'
        type: string

jobs:
  notify:
    if: github.event.action == 'floating_island_notification' || github.event.action == 'floating_island_check' || github.event.inputs.action == 'notify' || github.event.inputs.action == 'test' || github.event.inputs.action == 'test-send'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run floating island bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== FLOATING ISLAND NOTIFICATION ==="
          echo "Время запуска: $(date -u)"
          echo "Событие: ${{ github.event.action }}"
          echo "Входной параметр: ${{ github.event.inputs.action }}"
          
          if [ "${{ github.event.inputs.action }}" = "test" ]; then
            echo "Тестовый режим (проверка расписания):"
            python floating_island_bot.py --test
          elif [ "${{ github.event.inputs.action }}" = "test-send" ]; then
            echo "Тест отправки сообщения:"
            python floating_island_bot.py --test-send
          else
            echo "Режим уведомлений:"
            python floating_island_bot.py
          fi
          echo "=== END NOTIFICATION ==="

  single-schedule:
    if: github.event.inputs.action == 'single-schedule'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Schedule single floating island event
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== SINGLE SCHEDULING FLOATING ISLAND ==="
          echo "Время запуска: $(date -u)"
          python single_scheduler.py
          echo "=== END SINGLE SCHEDULING ==="

  fastcron-schedule:
    if: github.event.inputs.action == 'fastcron-schedule'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Schedule with FastCron
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== FASTCRON SCHEDULING FLOATING ISLAND ==="
          echo "Время запуска: $(date -u)"
          COUNT="${{ github.event.inputs.count || '30' }}"
          echo "Планируем $COUNT событий через FastCron"
          python fastcron_scheduler_fixed.py schedule $COUNT
          echo "=== END FASTCRON SCHEDULING ==="

  test-notification:
    if: github.event.inputs.action == 'test-notification'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run notification test
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== TEST NOTIFICATION SYSTEM ==="
          echo "Время запуска: $(date -u)"
          echo "Запускаем полное тестирование уведомлений"
          python test_notification.py full
          echo "=== END TEST NOTIFICATION ==="

  fastcron-test:
    if: github.event.inputs.action == 'fastcron-test'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test FastCron connections
        env:
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== FASTCRON CONNECTION TEST ==="
          echo "Время запуска: $(date -u)"
          python setup_fastcron_fixed.py test
          echo "=== END FASTCRON TEST ==="

  schedule:
    if: github.event.inputs.action == 'schedule'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Schedule floating island events
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "=== SCHEDULING FLOATING ISLAND EVENTS ==="
          echo "Время запуска: $(date -u)"
          COUNT="${{ github.event.inputs.count || '30' }}"
          echo "Планируем $COUNT событий"
          python scheduler.py schedule $COUNT
          echo "=== END SCHEDULING ==="

  cleanup:
    if: github.event.inputs.action == 'cleanup'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cleanup old jobs
        env:
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
        run: |
          echo "=== CLEANING UP OLD JOBS ==="
          echo "Время запуска: $(date -u)"
          python scheduler.py cleanup
          python fastcron_scheduler_fixed.py cleanup
          echo "=== END CLEANUP ==="

  list:
    if: github.event.inputs.action == 'list'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: List scheduled jobs
        env:
          CRONJOB_API_KEY: ${{ secrets.CRONJOB_API_KEY }}
          FASTCRON_API_KEY: ${{ secrets.FASTCRON_API_KEY }}
        run: |
          echo "=== LISTING SCHEDULED JOBS ==="
          echo "Время запуска: $(date -u)"
          python scheduler.py list
          python fastcron_scheduler_fixed.py list
          echo "=== END LISTING ==="
