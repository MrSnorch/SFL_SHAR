#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import requests
import json
import time
from datetime import datetime, timedelta
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è FastCron.com
FASTCRON_API_KEY = os.environ.get('FASTCRON_API_KEY')
FASTCRON_BASE_URL = 'https://www.fastcron.com/api'

# URL –¥–ª—è –≤—ã–∑–æ–≤–∞ –±–æ—Ç–∞
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
GITHUB_TOKEN = os.environ.get('GH_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

def validate_webhook_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ webhook URL"""
    if not url:
        return False, "URL –Ω–µ –∑–∞–¥–∞–Ω"
    
    if not url.startswith('https://api.github.com/repos/'):
        return False, "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://api.github.com/repos/"
    
    if not url.endswith('/dispatches'):
        return False, "URL –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ /dispatches"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL
    parts = url.replace('https://api.github.com/repos/', '').replace('/dispatches', '').split('/')
    if len(parts) != 2 or not all(parts):
        return False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: https://api.github.com/repos/{owner}/{repo}/dispatches"
    
    return True, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –≤–ª–∞–¥–µ–ª–µ—Ü={parts[0]}, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π={parts[1]}"

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    missing = []
    errors = []
    
    if not FASTCRON_API_KEY:
        missing.append("FASTCRON_API_KEY")
    if not WEBHOOK_URL:
        missing.append("WEBHOOK_URL") 
    if not GITHUB_TOKEN:
        missing.append("GH_TOKEN")
    if not TELEGRAM_BOT_TOKEN:
        missing.append("TELEGRAM_BOT_TOKEN")
    if not TELEGRAM_CHAT_ID:
        missing.append("TELEGRAM_CHAT_ID")
    
    if missing:
        errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç WEBHOOK_URL
    if WEBHOOK_URL:
        is_valid, message = validate_webhook_url(WEBHOOK_URL)
        if not is_valid:
            errors.append(f"‚ùå –û—à–∏–±–∫–∞ WEBHOOK_URL: {message}")
    
    if errors:
        print("\n".join(errors))
        print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        print("1. FASTCRON_API_KEY - API –∫–ª—é—á —Å —Å–∞–π—Ç–∞ fastcron.com")
        print("2. WEBHOOK_URL - https://api.github.com/repos/{username}/{repo}/dispatches")
        print("3. GH_TOKEN - Personal Access Token —Å –ø—Ä–∞–≤–∞–º–∏ 'repo' –∏ 'workflow'")
        print("4. TELEGRAM_BOT_TOKEN - –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
        print("5. TELEGRAM_CHAT_ID - ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    if WEBHOOK_URL:
        is_valid, message = validate_webhook_url(WEBHOOK_URL)
        print(f"üîó WEBHOOK_URL: {message}")
    return True

def send_test_telegram_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ Telegram –∏–ª–∏ chat ID –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return False
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    now_utc = datetime.now(pytz.UTC)
    kyiv_tz = pytz.timezone('Europe/Kiev')
    now_kyiv = now_utc.astimezone(kyiv_tz)
    
    # –°–ª–µ–¥—É—é—â–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤ 20 –º–∏–Ω—É—Ç (–¥–ª—è —Ç–µ—Å—Ç–∞)
    next_event = now_utc + timedelta(hours=8, minutes=20)
    next_kyiv = next_event.astimezone(kyiv_tz)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    message = f"""–ï–ë–£–ß–ò–ô –®–ê–† –ø—Ä–∏–±—ã–ª!
–°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–±—ã—Ç–∏–µ: {next_kyiv.strftime('%H:%M')}

üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï"""

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    data = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    
    try:
        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {TELEGRAM_CHAT_ID}...")
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
            print(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

def create_test_github_webhook():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π webhook –Ω–∞–ø—Ä—è–º—É—é –≤ GitHub –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    if not WEBHOOK_URL or not GITHUB_TOKEN:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è GitHub webhook")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º owner –∏ repo –∏–∑ WEBHOOK_URL –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
    try:
        if WEBHOOK_URL.startswith('https://api.github.com/repos/'):
            url_parts = WEBHOOK_URL.replace('https://api.github.com/repos/', '').split('/')
            if len(url_parts) >= 2:
                owner, repo = url_parts[0], url_parts[1]
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è dispatches
                github_dispatch_url = f"https://api.github.com/repos/{owner}/{repo}/actions/workflows/184853159/dispatches"
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç WEBHOOK_URL")
                return False
        else:
            print("‚ùå WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://api.github.com/repos/")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ WEBHOOK_URL: {e}")
        return False
    
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
    }
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload –¥–ª—è workflow dispatches - —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    test_payload = {
        'ref': 'main',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        'inputs': {
            'action': 'test-send'
        }
    }
    
    try:
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π webhook –≤ GitHub...")
        response = requests.post(github_dispatch_url, headers=headers, json=test_payload, timeout=10)
        
        if response.status_code == 204:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub!")
            print("üìã GitHub Actions –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ GitHub webhook: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook: {e}")
        return False

def create_test_fastcron_job():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ FastCron –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥"""
    if not validate_environment():
        return False
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    test_time = datetime.now(pytz.UTC) + timedelta(seconds=30)
    
    minute = test_time.minute
    hour = test_time.hour
    day = test_time.day
    month = test_time.month
    
    cron_expression = f"{minute} {hour} {day} {month} *"
    
    print(f"üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ó–ê–î–ê–ù–ò–Ø")
    print(f"‚è∞ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥: {test_time.strftime('%H:%M:%S')} UTC")
    print(f"‚öôÔ∏è Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {cron_expression}")
    
    title = f"TEST Floating Island {test_time.strftime('%d.%m %H:%M')} UTC"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è GitHub webhook (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    post_data = json.dumps({
        "event_type": "floating_island_notification",
        "client_payload": {
            "notification_time": test_time.isoformat(),
            "precision": "test",
            "test_mode": True
        },
        "ref": "main"
    })
    
    # HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GitHub API
    http_headers = f"Authorization: token {GITHUB_TOKEN}\\r\\nAccept: application/vnd.github.v3+json\\r\\nContent-Type: application/json"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è FastCron API (–∏—Å–ø–æ–ª—å–∑—É–µ–º POST —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º)
    payload = {
        'token': FASTCRON_API_KEY,
        'name': title,
        'expression': cron_expression,
        'url': WEBHOOK_URL,
        'httpMethod': 'POST',
        'postData': post_data,
        'httpHeaders': http_headers,
        'timezone': 'UTC',
        'notify': 'false'
    }
    
    try:
        response = requests.post(
            f"{FASTCRON_BASE_URL}/v1/cron_add",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                job_data = result.get('data', {})
                job_id = job_data.get('id')
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ FastCron (ID: {job_id})")
                print(f"üïê –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤: {test_time.strftime('%H:%M:%S')} UTC")
                return job_id
            else:
                error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå –û—à–∏–±–∫–∞ FastCron: {error_msg}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if len(sys.argv) < 2:
        print("üß™ TEST NOTIFICATION - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("=" * 55)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python test_notification.py telegram    - –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram")
        print("  python test_notification.py fastcron    - —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ FastCron (30 —Å–µ–∫)")
        print("  python test_notification.py github      - —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ GitHub webhook")
        print("  python test_notification.py full        - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python test_notification.py telegram    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
        print("  python test_notification.py fastcron    # –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        print("  python test_notification.py full        # –í—Å–µ —Ç–µ—Å—Ç—ã")
        return
    
    command = sys.argv[1].lower()
    
    print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now(pytz.UTC).strftime('%H:%M:%S')} UTC")
    print("=" * 60)
    
    if command == 'telegram':
        print("üì± –ü–†–Ø–ú–û–ô –¢–ï–°–¢ TELEGRAM")
        send_test_telegram_message()
        
    elif command == 'fastcron':
        print("‚ö° –¢–ï–°–¢ –ß–ï–†–ï–ó FASTCRON (30 –°–ï–ö–£–ù–î)")
        job_id = create_test_fastcron_job()
        if job_id:
            print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
            print(f"üïê –°–ª–µ–¥–∏—Ç–µ –∑–∞ GitHub Actions –∏ Telegram")
        
    elif command == 'github':
        print("üöÄ –¢–ï–°–¢ –ß–ï–†–ï–ó GITHUB WEBHOOK")
        create_test_github_webhook()
        
    elif command == 'full':
        print("üîÑ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...")
        send_test_telegram_message()
        
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç GitHub webhook...")
        create_test_github_webhook()
        
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç FastCron –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        job_id = create_test_fastcron_job()
        if job_id:
            print(f"‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
            print(f"üì± –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã")
        
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: telegram, fastcron, github, full")

if __name__ == "__main__":
    main()