#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import json
from datetime import datetime, timedelta
import pytz

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è cron-job.org
CRONJOB_API_KEY = os.environ.get('CRONJOB_API_KEY')
CRONJOB_BASE_URL = 'https://api.cron-job.org'

# URL –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')

def create_precise_notification_job(notification_time: datetime, title: str = None):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ cron-job.org –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return False
    
    if not WEBHOOK_URL:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL")
        return False
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è cron-job.org
    minute = notification_time.minute
    hour = notification_time.hour
    day = notification_time.day
    month = notification_time.month
    
    if not title:
        title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    job_data = {
        'job': {
            'url': WEBHOOK_URL,
            'enabled': True,
            'title': title,
            'schedule': {
                'timezone': 'UTC',
                'hours': [hour],
                'minutes': [minute],
                'mdays': [day],
                'months': [month],
                'wdays': [-1]  # –ª—é–±–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            },
            'requestMethod': 1,  # POST
            'requestHeaders': [
                {
                    'name': 'Content-Type',
                    'value': 'application/json'
                },
                {
                    'name': 'X-Notification-Type',
                    'value': 'floating-island-precise'
                }
            ],
            'requestBody': json.dumps({
                'event_type': 'floating_island_notification',
                'client_payload': {
                    'notification_time': notification_time.isoformat(),
                    'precision': 'exact'
                }
            })
        }
    }
    
    try:
        response = requests.put(
            f"{CRONJOB_BASE_URL}/jobs",
            headers=headers,
            json=job_data,
            timeout=30
        )
        
        if response.status_code in [200, 201]:
            result = response.json()
            job_id = result.get('jobId')
            print(f"‚úÖ –¢–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! Job ID: {job_id}")
            print(f"üïê –í—Ä–µ–º—è: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
            return job_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False

def cleanup_old_jobs():
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è Floating Island –∏–∑ cron-job.org
    """
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return False
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
        response = requests.get(f"{CRONJOB_BASE_URL}/jobs", headers=headers, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {response.status_code}")
            return False
        
        jobs = response.json().get('jobs', [])
        deleted_count = 0
        
        for job in jobs:
            title = job.get('title', '')
            job_id = job.get('jobId')
            
            # –ò—â–µ–º –∑–∞–¥–∞–Ω–∏—è Floating Island
            if 'Floating Island' in title and job_id:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è (–æ–Ω–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã)
                try:
                    delete_response = requests.delete(
                        f"{CRONJOB_BASE_URL}/jobs/{job_id}",
                        headers=headers,
                        timeout=30
                    )
                    
                    if delete_response.status_code == 200:
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title} (ID: {job_id})")
                        deleted_count += 1
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ {job_id}: {delete_response.status_code}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è {job_id}: {e}")
        
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
        return False

def schedule_floating_island_sequence(start_date: datetime = None, count: int = 30):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Floating Island
    """
    from floating_island_bot import calculate_next_events
    
    if not start_date:
        start_date = datetime.now(pytz.UTC)
    
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º {count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Floating Island, –Ω–∞—á–∏–Ω–∞—è —Å {start_date.strftime('%d.%m.%Y %H:%M')} UTC")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    print("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è...")
    cleanup_old_jobs()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    events = calculate_next_events(start_date, count=count)
    
    scheduled_count = 0
    failed_count = 0
    
    for i, event in enumerate(events, 1):
        notification_time = event['notification_time']
        event_start = event['event_start']
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º
        if notification_time <= start_date:
            continue
        
        print(f"\nüìå –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ {i}:")
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
        print(f"   –°–æ–±—ã—Ç–∏–µ: {event_start.strftime('%d.%m.%Y %H:%M')} UTC")
        
        title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
        job_id = create_precise_notification_job(notification_time, title)
        
        if job_id:
            scheduled_count += 1
            print(f"   ‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (Job ID: {job_id})")
        else:
            failed_count += 1
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print(f"\nüìä –ò–¢–û–ì–ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    print(f"üìã –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {scheduled_count + failed_count}")
    
    return scheduled_count > 0

def get_scheduled_jobs():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è Floating Island
    """
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(f"{CRONJOB_BASE_URL}/jobs", headers=headers, timeout=30)
        
        if response.status_code == 200:
            jobs = response.json().get('jobs', [])
            floating_jobs = [job for job in jobs if 'Floating Island' in job.get('title', '')]
            
            if not floating_jobs:
                print("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π Floating Island")
                return
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(floating_jobs)} –∑–∞–¥–∞–Ω–∏–π Floating Island:")
            print("-" * 60)
            
            for job in floating_jobs:
                job_id = job.get('jobId')
                title = job.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                enabled = job.get('enabled', False)
                
                status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
                print(f"{status} {title} (ID: {job_id})")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("ü§ñ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö FLOATING ISLAND")
        print("=" * 40)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python scheduler.py schedule [count] - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)")
        print("  python scheduler.py list             - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
        print("  python scheduler.py cleanup          - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è")
        print("  python scheduler.py single DATETIME  - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python scheduler.py schedule 10")
        print("  python scheduler.py single '2025-08-28 22:00'")
    else:
        command = sys.argv[1].lower()
        
        if command == 'schedule':
            count = int(sys.argv[2]) if len(sys.argv) > 2 else 30
            schedule_floating_island_sequence(count=count)
        elif command == 'list':
            get_scheduled_jobs()
        elif command == 'cleanup':
            cleanup_old_jobs()
        elif command == 'single' and len(sys.argv) > 2:
            datetime_str = sys.argv[2]
            try:
                dt = datetime.fromisoformat(datetime_str.replace(' ', 'T')).replace(tzinfo=pytz.UTC)
                create_precise_notification_job(dt)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 'YYYY-MM-DD HH:MM'")
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")