#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import requests
import json
import time
from datetime import datetime, timedelta
import pytz

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è cron-job.org
CRONJOB_API_KEY = os.environ.get('CRONJOB_API_KEY')
CRONJOB_BASE_URL = 'https://api.cron-job.org'

# URL –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
GITHUB_TOKEN = os.environ.get('GH_TOKEN')

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not CRONJOB_API_KEY:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CRONJOB_API_KEY")
        return False
    
    if not WEBHOOK_URL:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL")
        return False
    
    if not GITHUB_TOKEN:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GH_TOKEN")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def create_precise_notification_job(notification_time: datetime, title: str = None, retry_count: int = 3):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ cron-job.org –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limiting
    """
    if not validate_environment():
        return False
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è cron-job.org
    minute = notification_time.minute
    hour = notification_time.hour
    day = notification_time.day
    month = notification_time.month
    
    if not title:
        title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    job_data = {
        'job': {
            'url': WEBHOOK_URL,
            'enabled': True,
            'title': title,
            'schedule': {
                'timezone': 'UTC',
                'hours': [hour],
                'minutes': [minute],
                'mdays': [day],
                'months': [month],
                'wdays': [-1]  # –ª—é–±–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            },
            'requestMethod': 1,  # POST
            'requestHeaders': [
                {
                    'name': 'Authorization',
                    'value': f'token {GITHUB_TOKEN}'
                },
                {
                    'name': 'Accept',
                    'value': 'application/vnd.github.v3+json'
                },
                {
                    'name': 'Content-Type',
                    'value': 'application/json'
                }
            ],
            'requestBody': json.dumps({
                'event_type': 'floating_island_notification',
                'client_payload': {
                    'notification_time': notification_time.isoformat(),
                    'precision': 'exact'
                }
            })
        }
    }
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ rate limiting —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
    for attempt in range(retry_count):
        try:
            response = requests.put(
                f"{CRONJOB_BASE_URL}/jobs",
                headers=headers,
                json=job_data,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                result = response.json()
                job_id = result.get('jobId')
                print(f"‚úÖ –¢–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! Job ID: {job_id}")
                print(f"üïê –í—Ä–µ–º—è: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
                return job_id
            elif response.status_code == 429:
                # Rate limiting - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
                wait_time = (attempt + 1) * 30  # 30, 60, 90 —Å–µ–∫—É–Ω–¥
                print(f"‚è≥ Rate limit (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count}). –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
                time.sleep(wait_time)
                continue
            elif response.status_code == 401:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ cron-job.org. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                return False
            elif response.status_code == 400:
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {response.text}")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count})")
            if attempt < retry_count - 1:
                time.sleep(10)
                continue
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < retry_count - 1:
                time.sleep(5)
                continue
            return False
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫")
    return False

def cleanup_old_jobs():
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è Floating Island –∏–∑ cron-job.org —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    """
    if not validate_environment():
        return False
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
        response = requests.get(f"{CRONJOB_BASE_URL}/jobs", headers=headers, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {response.status_code}")
            return False
        
        jobs = response.json().get('jobs', [])
        deleted_count = 0
        now = datetime.now(pytz.UTC)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –∑–∞–¥–∞–Ω–∏–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...")
        
        for job in jobs:
            title = job.get('title', '')
            job_id = job.get('jobId')
            
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è Floating Island
            if 'Floating Island' in title and job_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º (Checker)
                if 'Checker' in title or 'Notifications Checker' in title:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}")
                    continue
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–æ–Ω–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ)
                try:
                    delete_response = requests.delete(
                        f"{CRONJOB_BASE_URL}/jobs/{job_id}",
                        headers=headers,
                        timeout=30
                    )
                    
                    if delete_response.status_code == 200:
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {title} (ID: {job_id})")
                        deleted_count += 1
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ {job_id}: {delete_response.status_code}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è {job_id}: {e}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å rate limiting
                time.sleep(2)
        
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–¥–∞–Ω–∏–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
        return False

def schedule_floating_island_sequence(start_date: datetime = None, count: int = 30):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Floating Island —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    """
    try:
        from floating_island_bot import calculate_next_events
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å floating_island_bot")
        return False
    
    if not validate_environment():
        return False
    
    if not start_date:
        start_date = datetime.now(pytz.UTC)
    
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º {count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Floating Island")
    print(f"‚è∞ –ù–∞—á–∏–Ω–∞—è —Å: {start_date.strftime('%d.%m.%Y %H:%M')} UTC")
    print("=" * 60)
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
    print("‚è≥ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥...")
    time.sleep(10)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    print("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è...")
    cleanup_old_jobs()
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    events = calculate_next_events(start_date, count=count)
    
    scheduled_count = 0
    failed_count = 0
    skipped_count = 0
    
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(events)} —Å–æ–±—ã—Ç–∏–π...")
    print("-" * 60)
    
    for i, event in enumerate(events, 1):
        notification_time = event['notification_time']
        event_start = event['event_start']
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º
        if notification_time <= start_date:
            print(f"‚è≠Ô∏è –°–æ–±—ã—Ç–∏–µ {i}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–≤ –ø—Ä–æ—à–ª–æ–º)")
            skipped_count += 1
            continue
        
        print(f"\nüìå –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ {i}/{len(events)}:")
        print(f"   üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_time.strftime('%d.%m.%Y %H:%M')} UTC")
        print(f"   üéà –°–æ–±—ã—Ç–∏–µ: {event_start.strftime('%d.%m.%Y %H:%M')} UTC")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        time_until = (notification_time - start_date).total_seconds()
        hours_until = int(time_until // 3600)
        print(f"   ‚è∞ –ß–µ—Ä–µ–∑: {hours_until} —á–∞—Å–æ–≤")
        
        title = f"Floating Island {notification_time.strftime('%d.%m %H:%M')} UTC"
        job_id = create_precise_notification_job(notification_time, title)
        
        if job_id:
            scheduled_count += 1
            print(f"   ‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (Job ID: {job_id})")
        else:
            failed_count += 1
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        if i < len(events) and i % 5 == 0:
            # –ë–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 5 –∑–∞–¥–∞–Ω–∏–π
            print(f"   ‚è∏Ô∏è –ü–∞—É–∑–∞ 60 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥—ã–µ 5 –∑–∞–¥–∞–Ω–∏–π)...")
            time.sleep(60)
        elif i < len(events):
            # –û–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞
            time.sleep(20)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–æ 20 —Å–µ–∫—É–Ω–¥
    
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—Ä–æ—à–ª—ã–µ): {skipped_count}")
    print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    
    if scheduled_count > 0:
        print(f"\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
        return False

def get_scheduled_jobs():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è Floating Island —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    if not validate_environment():
        return
    
    headers = {
        'Authorization': f'Bearer {CRONJOB_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(f"{CRONJOB_BASE_URL}/jobs", headers=headers, timeout=30)
        
        if response.status_code == 200:
            jobs = response.json().get('jobs', [])
            floating_jobs = [job for job in jobs if 'Floating Island' in job.get('title', '')]
            
            if not floating_jobs:
                print("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π Floating Island")
                return
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(floating_jobs)} –∑–∞–¥–∞–Ω–∏–π Floating Island:")
            print("=" * 80)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            checker_jobs = []
            scheduled_jobs = []
            
            for job in floating_jobs:
                if 'Checker' in job.get('title', ''):
                    checker_jobs.append(job)
                else:
                    scheduled_jobs.append(job)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            if checker_jobs:
                print("üîÑ –û–°–ù–û–í–ù–´–ï –ó–ê–î–ê–ù–ò–Ø (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ):")
                for job in checker_jobs:
                    job_id = job.get('jobId')
                    title = job.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    enabled = job.get('enabled', False)
                    
                    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
                    print(f"  {status} {title} (ID: {job_id})")
                print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if scheduled_jobs:
                print("üìÖ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                now = datetime.now(pytz.UTC)
                scheduled_jobs.sort(key=lambda x: x.get('title', ''))
                
                for job in scheduled_jobs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    job_id = job.get('jobId')
                    title = job.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    enabled = job.get('enabled', False)
                    
                    status = "üü¢" if enabled else "üî¥"
                    print(f"  {status} {title} (ID: {job_id})")
                
                if len(scheduled_jobs) > 10:
                    print(f"  ... –∏ –µ—â–µ {len(scheduled_jobs) - 10} –∑–∞–¥–∞–Ω–∏–π")
            
            print(f"\nüìä –í–°–ï–ì–û: {len(floating_jobs)} –∑–∞–¥–∞–Ω–∏–π")
            
        elif response.status_code == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á cron-job.org")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    if len(sys.argv) < 2:
        print("üìÖ SCHEDULER - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π Floating Island")
        print("=" * 50)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scheduler.py schedule [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]  - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)")
        print("  python scheduler.py list                   - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
        print("  python scheduler.py cleanup                - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è")
        print("  python scheduler.py test                   - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python scheduler.py schedule 50    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å 50 —Å–æ–±—ã—Ç–∏–π")
        print("  python scheduler.py schedule       # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å 30 —Å–æ–±—ã—Ç–∏–π")
        return
    
    command = sys.argv[1].lower()
    
    if command == 'schedule':
        count = 30
        if len(sys.argv) > 2:
            try:
                count = int(sys.argv[2])
                if count <= 0 or count > 100:
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
                    return
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
                return
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {count} —Å–æ–±—ã—Ç–∏–π...")
        schedule_floating_island_sequence(count=count)
        
    elif command == 'list':
        get_scheduled_jobs()
        
    elif command == 'cleanup':
        print("üßπ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
        cleanup_old_jobs()
        
    elif command == 'test':
        print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        if validate_environment():
            try:
                from setup_cronjob import test_cronjob_connection, test_github_connection
                test_cronjob_connection()
                test_github_connection()
            except ImportError:
                print("‚ö†Ô∏è –ú–æ–¥—É–ª—å setup_cronjob –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: schedule, list, cleanup, test")

if __name__ == "__main__":
    main()
